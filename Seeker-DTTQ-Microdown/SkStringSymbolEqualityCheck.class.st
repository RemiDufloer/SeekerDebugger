Class {
	#name : #SkStringSymbolEqualityCheck,
	#superclass : #Object,
	#instVars : [
		'node',
		'methodClass',
		'methodSelector',
		'receiver',
		'operand',
		'pcsForNode',
		'className'
	],
	#category : #'Seeker-DTTQ-Microdown-Functions'
}

{ #category : #'ston-core' }
SkStringSymbolEqualityCheck class >> inspectStoredData [

	<example>
	^ self storedData inspect
]

{ #category : #'ston-core' }
SkStringSymbolEqualityCheck class >> stonAllInstVarNames [

	^ #( methodSelector receiver operand pcsForNode className )
]

{ #category : #'ston-core' }
SkStringSymbolEqualityCheck class >> storedData [

	^ STON fromString: (STON fromString: self storedSTONData) asString
]

{ #category : #'ston-core' }
SkStringSymbolEqualityCheck class >> storedSTONData [
	^'ByteArray[''5365745b536b537472696e6753796d626f6c457175616c697479436865636b7b236d6574686f6453656c6563746f723a2327696e6465784f663a7374617274696e6741743a6966416273656e743a272c2372656365697665723a236d61696c746f2c236f706572616e643a2766696c65272c23706373466f724e6f64653a4f726465726564436f6c6c656374696f6e5b35355d2c23636c6173734e616d653a2341727261797d2c536b537472696e6753796d626f6c457175616c697479436865636b7b236d6574686f6453656c6563746f723a2327657874656e73696f6e436c617373466f723a272c2372656365697665723a236369746174696f6e2c236f706572616e643a276369746174696f6e272c23706373466f724e6f64653a4f726465726564436f6c6c656374696f6e5b5d2c23636c6173734e616d653a274d6963416e6e6f746174696f6e426c6f636b20636c617373277d2c536b537472696e6753796d626f6c457175616c697479436865636b7b236d6574686f6453656c6563746f723a2327616c7465726e617465426c6f636b436c617373466f723a272c2372656365697665723a23706861726f7363726970742c236f706572616e643a27272c23706373466f724e6f64653a4f726465726564436f6c6c656374696f6e5b5d2c23636c6173734e616d653a274d69634162737472616374436f6465426c6f636b20636c617373277d2c536b537472696e6753796d626f6c457175616c697479436865636b7b236d6574686f6453656c6563746f723a23276173736572743a657175616c733a272c2372656365697665723a2362617369632c236f706572616e643a276261736963272c23706373466f724e6f64653a4f726465726564436f6c6c656374696f6e5b34342c34352c34365d2c23636c6173734e616d653a234d69634d617468426c6f636b546573747d2c536b537472696e6753796d626f6c457175616c697479436865636b7b236d6574686f6453656c6563746f723a23277363616e466f723a272c2372656365697665723a2377696474682c236f706572616e643a277769647468272c23706373466f724e6f64653a4f726465726564436f6c6c656374696f6e5b39375d2c23636c6173734e616d653a2344696374696f6e6172797d2c536b537472696e6753796d626f6c457175616c697479436865636b7b236d6574686f6453656c6563746f723a23277265736f6c7665536c6f743a6966466f756e643a69664e6f6e653a272c2372656365697665723a23706172656e742c236f706572616e643a27626f6479272c23706373466f724e6f64653a4f726465726564436f6c6c656374696f6e5b5d2c23636c6173734e616d653a234c61796f7574436c61737353636f70657d2c536b537472696e6753796d626f6c457175616c697479436865636b7b236d6574686f6453656c6563746f723a23276173736572743a657175616c733a272c2372656365697665723a23616e63686f725265666572656e63652c236f706572616e643a27616e63686f725265666572656e6365272c23706373466f724e6f64653a4f726465726564436f6c6c656374696f6e5b34342c34352c34365d2c23636c6173734e616d653a234d6963726f646f776e496e6c696e65506172736572546573747d2c536b537472696e6753796d626f6c457175616c697479436865636b7b236d6574686f6453656c6563746f723a23273d272c2372656365697665723a2366696775726553616d706c652c236f706572616e643a276b6579272c23706373466f724e6f64653a4f726465726564436f6c6c656374696f6e5b36332c36345d2c23636c6173734e616d653a234279746553796d626f6c7d2c536b537472696e6753796d626f6c457175616c697479436865636b7b236d6574686f6453656c6563746f723a2327636f7079576974686f75743a272c2372656365697665723a236c616e67756167652c236f706572616e643a276c616e6775616765272c23706373466f724e6f64653a4f726465726564436f6c6c656374696f6e5b5d2c23636c6173734e616d653a2341727261797d2c536b537472696e6753796d626f6c457175616c697479436865636b7b236d6574686f6453656c6563746f723a23276173736572743a657175616c733a272c2372656365697665723a23626f6c642c236f706572616e643a27626f6c64272c23706373466f724e6f64653a4f726465726564436f6c6c656374696f6e5b34342c34352c34365d2c23636c6173734e616d653a234d6963556e6f7264657265644c697374426c6f636b546573747d2c536b537472696e6753796d626f6c457175616c697479436865636b7b236d6574686f6453656c6563746f723a232768616e646c6573557269536368656d653a272c2372656365697665723a23737161662c236f706572616e643a27706861726f272c23706373466f724e6f64653a4f726465726564436f6c6c656374696f6e5b33355d2c23636c6173734e616d653a274d6963506861726f496d6167655265736f757263655265666572656e636520636c617373277d2c536b537472696e6753796d626f6c457175616c697479436865636b7b236d6574686f6453656c6563746f723a2327636f6465626c6f636b3a66697273744c696e654173736f63696174696f6e733a7769746843617074696f6e3a272c2372656365697665723a276c616e677561676532272c236f706572616e643a2363617074696f6e2c23706373466f724e6f64653a4f726465726564436f6c6c656374696f6e5b5d2c23636c6173734e616d653a234d69634d6963726f646f776e5465787475616c4275696c6465727d2c536b537472696e6753796d626f6c457175616c697479436865636b7b236d6574686f6453656c6563746f723a2327657874656e73696f6e436c617373466f723a272c2372656365697665723a23636f6c756d6e2c236f706572616e643a27636f6c756d6e73272c23706373466f724e6f64653a4f726465726564436f6c6c656374696f6e5b5d2c23636c6173734e616d653a274d6963456e7669726f6e6d656e74426c6f636b20636c617373277d2c536b537472696e6753796d626f6c457175616c697479436865636b7b236d6574686f6453656c6563746f723a2327616c7465726e617465426c6f636b436c617373466f723a272c2372656365697665723a27272c236f706572616e643a237363726970742c23706373466f724e6f64653a4f726465726564436f6c6c656374696f6e5b3133315d2c23636c6173734e616d653a274d69634162737472616374436f6465426c6f636b20636c617373277d2c536b537472696e6753796d626f6c457175616c697479436865636b7b236d6574686f6453656c6563746f723a232768616e646c6573557269536368656d653a272c2372656365697665723a2368747470732c236f706572616e643a2766696c65272c23706373466f724e6f64653a4f726465726564436f6c6c656374696f6e5b33355d2c23636c6173734e616d653a274d696346696c655265736f757263655265666572656e636520636c617373277d2c536b537472696e6753796d626f6c457175616c697479436865636b7b236d6574686f6453656c6563746f723a23276d617468626c6f636b3a66697273744c696e654173736f63696174696f6e733a7769746843617074696f6e3a272c2372656365697665723a276c6162656c272c236f706572616e643a2363617074696f6e2c23706373466f724e6f64653a4f726465726564436f6c6c656374696f6e5b5d2c23636c6173734e616d653a234d69634d6963726f646f776e5465787475616c4275696c6465727d2c536b537472696e6753796d626f6c457175616c697479436865636b7b236d6574686f6453656c6563746f723a23276173736572743a657175616c733a272c2372656365697665723a27706861726f272c236f706572616e643a23706861726f2c23706373466f724e6f64653a4f726465726564436f6c6c656374696f6e5b34342c34352c34365d2c23636c6173734e616d653a234d6963436f6465426c6f636b546573747d2c536b537472696e6753796d626f6c457175616c697479436865636b7b236d6574686f6453656c6563746f723a23277363616e466f723a272c2372656365697665723a2366696775726553616d706c652c236f706572616e643a276b6579272c23706373466f724e6f64653a4f726465726564436f6c6c656374696f6e5b39385d2c23636c6173734e616d653a235765616b5365747d2c536b537472696e6753796d626f6c457175616c697479436865636b7b236d6574686f6453656c6563746f723a23276173736572743a657175616c733a272c2372656365697665723a23626f6c642c236f706572616e643a27626f6c64272c23706373466f724e6f64653a4f726465726564436f6c6c656374696f6e5b34342c34352c34365d2c23636c6173734e616d653a234d6963726f646f776e506172736572546573747d5d'']'
]

{ #category : #comparing }
SkStringSymbolEqualityCheck >> = anObject [
	"Answer whether the receiver and anObject represent the same object."

	self == anObject ifTrue: [ ^ true ].
	self class = anObject class ifFalse: [ ^ false ].
	node ifNil:[self rebuild].
	^ node = anObject node and: [
		  node start = anObject node start and: [
			  node stop = anObject node stop and: [
				  methodSelector = anObject methodSelector and: [
					  methodClass = anObject methodClass ] ] ] ]
]

{ #category : #comparing }
SkStringSymbolEqualityCheck >> hash [
	"Answer an integer value that is related to the identity of the receiver."

	^ node hash bitXor: (methodSelector hash bitXor: methodClass hash)
]

{ #category : #accessing }
SkStringSymbolEqualityCheck >> method [
	^methodClass lookupSelector: methodSelector 
]

{ #category : #accessing }
SkStringSymbolEqualityCheck >> methodClass [

	^ methodClass
]

{ #category : #accessing }
SkStringSymbolEqualityCheck >> methodClass: anObject [

	methodClass := anObject.
	className := methodClass name
]

{ #category : #accessing }
SkStringSymbolEqualityCheck >> methodSelector [

	^ methodSelector
]

{ #category : #accessing }
SkStringSymbolEqualityCheck >> methodSelector: anObject [

	methodSelector := anObject
]

{ #category : #accessing }
SkStringSymbolEqualityCheck >> node [

	^ node
]

{ #category : #accessing }
SkStringSymbolEqualityCheck >> node: anObject [

	node := anObject.
	pcsForNode := node methodNode bcToASTCache pcsForNode: node
]

{ #category : #accessing }
SkStringSymbolEqualityCheck >> operand [

	^ operand
]

{ #category : #accessing }
SkStringSymbolEqualityCheck >> operand: anObject [

	operand := anObject
]

{ #category : #building }
SkStringSymbolEqualityCheck >> rebuild [

	| cname ast |
	cname := className asString splitOn: Character space.

	methodClass := Smalltalk at: cname first asSymbol.
	cname size = 2 ifTrue: [ methodClass := methodClass class ].
	ast := (methodClass lookupSelector: methodSelector) ast.

	node := pcsForNode isEmpty
		        ifTrue: [ ast ]
		        ifFalse: [ ast bcToASTCache nodeForPC: pcsForNode first ]
]

{ #category : #accessing }
SkStringSymbolEqualityCheck >> receiver [

	^ receiver
]

{ #category : #accessing }
SkStringSymbolEqualityCheck >> receiver: anObject [

	receiver := anObject
]
